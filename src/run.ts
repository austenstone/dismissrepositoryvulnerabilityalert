import * as core from '@actions/core';
import * as github from '@actions/github';
import type { GraphQlQueryResponseData } from "@octokit/graphql";

interface Input {
  token: string;
  owner: string;
  repo: string;
  scope: 'DEVELOPMENT' | 'RUNTIME' | 'development' | 'runtime';
  dismissReason: 'fix_started' | 'inaccurate' | 'no_bandwidth' | 'not_used' | 'tolerable_risk' | 'FIX_STARTED' | 'INACCURATE' | 'NO_BANDWIDTH' | 'NOT_USED' | 'TOLERABLE_RISK';
}

export function getInputs(): Input {
  const result = {} as Input;
  result.token = core.getInput('github-token');
  result.owner = core.getInput('owner');
  result.repo = core.getInput('repo');
  result.scope = core.getInput('scope') as Input['scope'];
  result.dismissReason = core.getInput('dismiss-reason') as Input['dismissReason'];
  return result;
}

const run = async (): Promise<void> => {
  try {
    const input = getInputs();
    const octokit: ReturnType<typeof github.getOctokit> = github.getOctokit(input.token);

    const response: GraphQlQueryResponseData = await octokit.graphql(`{
      repository(name: "${input.repo}", owner: "${input.owner}") {
        vulnerabilityAlerts(first: 100, dependencyScopes: ${input.scope}) {
          nodes {
            id
          }
        }
      }
    }`);
    core.info(JSON.stringify(response, null, 2));
    const {
      data: {
        repository: {
          vulnerabilityAlerts: {
            nodes
          }
        }
      }
    } = response;
    nodes.forEach(async node => {
      const response: GraphQlQueryResponseData = await octokit.graphql(`mutation MyMutation {
        dismissRepositoryVulnerabilityAlert(
          input: {repositoryVulnerabilityAlertId: "${node.id}", dismissReason: ${input.dismissReason}}
        )
      }`);
      core.info(JSON.stringify(response));
    });
  } catch (error) {
    core.startGroup(error instanceof Error ? error.message : JSON.stringify(error));
    core.info(JSON.stringify(error, null, 2));
    core.endGroup();
  }
};

export default run;
